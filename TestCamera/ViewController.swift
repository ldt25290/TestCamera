//
//  ViewController.swift
//  TestCamera
//
//  Created by Luu Tran on 9/7/20.
//  Copyright Â© 2020 Luu Tran. All rights reserved.
//

import UIKit
import AVFoundation

class ViewController: UIViewController {
  

  let cameraController = CameraController()
  
  override var prefersStatusBarHidden: Bool { return true }
  
  @IBOutlet fileprivate var captureButton: UIButton!
     
  ///Displays a preview of the video output generated by the device's cameras.
  @IBOutlet fileprivate var capturePreviewView: UIView!

  @IBOutlet fileprivate var toggleFlashButton: UIButton!
  
  @IBOutlet fileprivate var toggleCameraButton: UIButton!


}

extension ViewController {
    override func viewDidLoad() {
        
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
      
         func checkCameraPermission(_ handler: @escaping (_ granted: Bool) -> Void) {
            func hasCameraPermission() -> Bool {
              return AVCaptureDevice.authorizationStatus(for: .video) == .authorized
            }
            
            func needsToRequestCameraPermission() -> Bool {
              return AVCaptureDevice.authorizationStatus(for: .video) == .notDetermined
            }
            
            hasCameraPermission() ? handler(true) : (needsToRequestCameraPermission() ?
              AVCaptureDevice.requestAccess(for: .video, completionHandler: { granted in
                    DispatchQueue.main.async(execute: { () -> Void in
                        hasCameraPermission() ? handler(true) : handler(false)
                    })
              }) : handler(false))
        }
        
        styleCaptureButton()
        checkCameraPermission { (isGranted) in
          print("granted \(isGranted)")
        }
        configureCameraController()
        
    }
}

extension ViewController {
  @IBAction func toggleFlash(_ sender: UIButton) {
      if cameraController.flashMode == .on {
          cameraController.flashMode = .off
          toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
      }
          
      else {
          cameraController.flashMode = .on
          toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
      }
  }
  
  @IBAction func switchCameras(_ sender: UIButton) {
      do {
          try cameraController.switchCameras()
      }
          
      catch {
          print(error)
      }
      
      switch cameraController.currentCameraPosition {
      case .some(.front):
          toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
          
      case .some(.rear):
          toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
          
      case .none:
          return
      }
  }
  
  @IBAction func captureImage(_ sender: UIButton) {
       cameraController.captureImage {(image, error) in
           guard let image = image else {
               print(error ?? "Image capture error")
               return
           }
           
          print("image \(image)")
       }
   }
}
